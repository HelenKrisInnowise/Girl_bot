name: CI/CD Pipeline for Girls Chatbot

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to run the workflow from"
        required: true
        default: main # Default to 'main' branch
        type: string

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Compose services
        run: |
          # Set environment variables for Docker Compose, using GitHub Secrets
          # These variables are needed by docker-compose.yml for configuring services.
          # IMPORTANT: For inter-container communication within Docker Compose network,
          # use service names (e.g., 'fastapi-backend') as hostnames.
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          export MEM0_API_KEY=${{ secrets.MEM0_API_KEY }}
          export NEO4J_URI=${{ secrets.NEO4J_URI }} # This should be bolt://neo4j:7687 for internal Docker network
          export NEO4J_USER=${{ secrets.NEO4J_USER }}
          export NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
          export NEO4J_DATABASE=${{ secrets.NEO4J_DATABASE }}
          export FASTAPI_BACKEND_URL=${{ secrets.FASTAPI_BACKEND_URL }} # This should be http://fastapi-backend:8000 for internal Docker network

          # Build all services defined in docker-compose.yml
          docker compose build

          # Push images for each service.
          # Ensure your docker-compose.yml has `image: YOUR_DOCKER_USERNAME/service-name:tag` for each service.
          docker compose push

        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MEM0_API_KEY: ${{ secrets.MEM0_API_KEY }}
          NEO4J_URI: ${{ secrets.NEO4J_URI }}
          NEO4J_USER: ${{ secrets.NEO4J_USER }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
          NEO4J_DATABASE: ${{ secrets.NEO4J_DATABASE }}
          FASTAPI_BACKEND_URL: ${{ secrets.FASTAPI_BACKEND_URL }}

  # deploy: # Optional: Conceptual job for deployment to Azure
  #   needs: build-and-push-docker # This job depends on successful build and push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }} # Azure Service Principal credentials
  #     - name: Deploy to Azure Container Apps/AKS
  #       # This would involve Azure-specific deployment actions
  #       # e.g., azure/container-apps-deploy@v1 or kubernetes-action
  #       run: echo "Deploying to Azure..."
